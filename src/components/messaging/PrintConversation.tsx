import { Button } from '@/components/ui/button';
import { Printer } from 'lucide-react';
import { supabase } from '@/integrations/supabase/client';
import { toast } from '@/hooks/use-toast';
import { format } from 'date-fns';

interface PrintConversationProps {
  conversationId: string;
  conversationTitle: string;
}

export const PrintConversation = ({ conversationId, conversationTitle }: PrintConversationProps) => {
  const handlePrint = async () => {
    try {
      // Fetch all messages
      const { data: messages, error } = await supabase
        .from('messages')
        .select('*')
        .eq('conversation_id', conversationId)
        .order('created_at', { ascending: true });

      if (error) throw error;

      // Fetch sender profiles
      const senderIds = [...new Set(messages?.map(m => m.sender_id))];
      const { data: profiles } = await supabase
        .from('profiles')
        .select('user_id, first_name, last_name')
        .in('user_id', senderIds);

      const profileMap = profiles?.reduce((acc, p) => {
        acc[p.user_id] = `${p.first_name} ${p.last_name}`;
        return acc;
      }, {} as Record<string, string>) || {};

      // Create print window
      const printWindow = window.open('', '_blank');
      if (!printWindow) {
        throw new Error('Could not open print window');
      }

      // Generate HTML content
      const htmlContent = `
        <!DOCTYPE html>
        <html>
          <head>
            <title>${conversationTitle} - Conversation Export</title>
            <style>
              @media print {
                @page { margin: 1in; }
              }
              body {
                font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
                line-height: 1.6;
                color: #333;
                max-width: 800px;
                margin: 0 auto;
                padding: 20px;
              }
              .header {
                border-bottom: 2px solid #e5e7eb;
                padding-bottom: 20px;
                margin-bottom: 30px;
              }
              .header h1 {
                margin: 0 0 10px 0;
                font-size: 24px;
              }
              .header .meta {
                color: #6b7280;
                font-size: 14px;
              }
              .message {
                margin-bottom: 25px;
                page-break-inside: avoid;
              }
              .message-header {
                display: flex;
                justify-content: space-between;
                margin-bottom: 8px;
                font-size: 14px;
              }
              .sender {
                font-weight: 600;
                color: #111827;
              }
              .timestamp {
                color: #6b7280;
              }
              .content {
                padding: 12px;
                background: #f9fafb;
                border-radius: 6px;
                border-left: 3px solid #3b82f6;
              }
              .footer {
                margin-top: 40px;
                padding-top: 20px;
                border-top: 1px solid #e5e7eb;
                color: #6b7280;
                font-size: 12px;
                text-align: center;
              }
            </style>
          </head>
          <body>
            <div class="header">
              <h1>${conversationTitle}</h1>
              <div class="meta">
                Exported on ${format(new Date(), 'PPpp')} â€¢ ${messages?.length || 0} messages
              </div>
            </div>
            
            <div class="messages">
              ${messages?.map(msg => {
                const senderName = profileMap[msg.sender_id] || 'Unknown';
                const timestamp = format(new Date(msg.created_at), 'PPp');
                
                return `
                  <div class="message">
                    <div class="message-header">
                      <span class="sender">${senderName}</span>
                      <span class="timestamp">${timestamp}</span>
                    </div>
                    <div class="content">${msg.content}</div>
                  </div>
                `;
              }).join('') || ''}
            </div>
            
            <div class="footer">
              This is an automated export of a conversation. 
              Generated by Property Management System.
            </div>
            
            <script>
              window.onload = function() {
                window.print();
              }
            </script>
          </body>
        </html>
      `;

      printWindow.document.write(htmlContent);
      printWindow.document.close();

    } catch (error) {
      console.error('Print error:', error);
      toast({
        title: "Print failed",
        description: "Failed to generate print preview",
        variant: "destructive"
      });
    }
  };

  return (
    <Button variant="outline" size="sm" onClick={handlePrint}>
      <Printer className="h-4 w-4 mr-2" />
      Print
    </Button>
  );
};
